syntax = "proto3";

message DNS {
	repeated string servers = 1;
	string bind = 2;
}

message Log {
	enum Level {
		TRACE = 0;
		DEBUG = 1;
		INFO = 2;
		WARN = 3;
		ERROR = 4;
	}

	enum Output {
		CONSOLE = 0;
		FILE = 1;
	}

	Level level = 1;
	Output output = 2;
	string output_file = 3;
}

message TUNInboundSettings {
	int32 fd = 1;
	string name = 2;
	string address = 3;
	string gateway = 4;
	string netmask = 5;
	int32 mtu = 6;
	repeated string fake_dns_exclude = 7;
}

message SocksInboundSettings {
	string bind = 1;
}

message Inbound {
	string tag = 1;
	string protocol = 2; // TODO use enum
	string listen = 3;
	uint32 port = 4;
	bytes settings = 5;
}

message RedirectOutboundSettings {
	string address = 1;
	uint32 port = 2;
}

message SocksOutboundSettings {
	string address = 1;
	uint32 port = 2;
}

message ShadowsocksOutboundSettings {
	string address = 1;
	uint32 port = 2;
	string method = 3; // TODO use enum
	string password = 4;
}

message TrojanOutboundSettings {
	string address = 1;
	uint32 port = 2;
	string password = 3;
}

message VMessOutboundSettings {
	string address = 1;
	uint32 port = 2;
	string uuid = 3;
	string security = 4;
}

message VLessOutboundSettings {
	string address = 1;
	uint32 port = 2;
	string uuid = 3;
}

message TlsOutboundSettings {
	string server_name = 1;
	repeated string alpn = 2;
}

message WebSocketOutboundSettings {
	string path = 1;
}

message HTTP2OutboundSettings {
	string path = 1;
	string host = 2;
}

message TryAllOutboundSettings {
	repeated string actors = 1;
	uint32 delay_base = 2;
}

message RandomOutboundSettings {
	repeated string actors = 1;
}

message ChainOutboundSettings {
	repeated string actors = 1;
}

message FailOverOutboundSettings {
	repeated string actors = 1;
	uint32 fail_timeout = 2;
	// if health check is disabled, it will always perform failover
	// to other actors dispite whatever failover option is set.
	bool health_check = 3;
	uint32 check_interval = 4;
	bool failover = 5;
}

message Outbound {
	string tag = 1;
	string protocol = 2; // TODO use enum
	string bind = 3;
	bytes settings = 4;
}

message RoutingRule {
	message Domain {
		enum Type {
			PLAIN = 0;
			DOMAIN = 1;
			FULL = 2;
		}

		Type type = 1;
		string value = 2;
	}

	message Mmdb {
		string file = 1;
		string country_code = 2;
	}

	string target_tag = 1;
	repeated Domain domains = 2;
	repeated string ip_cidrs = 3;
	repeated Mmdb mmdbs = 4;
}

message Config {
	Log log = 1;
	repeated Inbound inbounds = 2;
	repeated Outbound outbounds = 3;
	repeated RoutingRule routing_rules = 4;
	DNS dns = 5;
}
